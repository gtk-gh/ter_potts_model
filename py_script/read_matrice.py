from copy import deepcopyimport numpy as npimport matplotlib.pyplot as pltdef read(txt):    f = open(txt, "r")    lines = f.readlines()    i = 0    lin = 0    col = 0    listtemp = []    for line in lines:        if i == 0:            lin = int(line)        elif i == 1:            col = int(line)            templ = [0 for i in range(col)]            for tempi in range(lin):                listtemp.append(templ.copy())        else:            temp = line.split(" ")            for j in range(col-1):                 listtemp[i-2][j] = float(temp[j])            listtemp[i-2][col-1] = float(temp[col-1][:-1])        i += 1    f.close()    return listtempdef read2(txt):    n = 0    res = list()    f = open(txt, "r")    lines = f.readlines()    i = 0    lin = 0    col = 0    listtemp = []    for line in lines:        if i == 0:            n = int(line)        elif i == 1:            lin = int(line)        elif i == 2:            col = int(line)            templ = [0 for i in range(col)].copy()            mat = 1            for tempi in range(lin):                listtemp.append(templ.copy())        else:            if i == (lin+1) * mat +2 :                mat += 1                res.append(deepcopy(listtemp))                #print(listtemp)                if mat == n+1:                    break            else:                temp = line.split(" ")                for j in range(col-1):                     listtemp[(i-3)%(lin+1)][j] = float(temp[j])                listtemp[(i-3)%(lin+1)][col-1] = float(temp[col-1][:-1])            i += 1    f.close()        return resdef read_opti(txt):    n = 0    res = list()    f = open(txt, "r")    lines = f.readlines()    i = 0    lin = 0    col = 0    listtemp = []    for line in lines:        if i == 0:            n = int(line)        elif i == 1:            lin = int(line)        elif i == 2:            col = int(line)            templ = [0 for i in range(col)].copy()            mat = 1            for tempi in range(lin):                listtemp.append(templ.copy())        else:            if i == (lin+1) * mat +2 :                mat += 1                res.append(deepcopy(listtemp))                #print(listtemp)                                array = res[-1]                mat2 = np.matrix(array)                x = np.arange(0, len(array))  # vecteur x                y = np.arange(0, len(array[0]))  # vecteur y                cmap = plt.get_cmap('tab10') # choix du set de couleur                etatmin = mat2.min()                etatmax = mat2.max()                fig, ax = plt.subplots(nrows=1, ncols=1)                # Affectation des états                # On plot la matrice avec un état = une couleur sur la grille                colormesh = ax.pcolor(x, y, array,linewidths=1,vmin=etatmin, vmax=etatmax, cmap=cmap)                #for (k, j), z in np.ndenumerate(array):                    #ax.text(j, k, '{:0.0f}'.format(z), ha='center', va='center')                plt.suptitle("n = {}".format(mat-1), y=1.05, fontsize=18)                cbar = fig.colorbar(colormesh,aspect = 1) # configuration de la colorbar pour afficher les états                plt.show()                                if mat == n+1:                    break            else:                temp = line.split(" ")                for j in range(col-1):                     listtemp[(i-3)%(lin+1)][j] = float(temp[j])                listtemp[(i-3)%(lin+1)][col-1] = float(temp[col-1][:-1])            i += 1    f.close()    passread_opti("extrait.txt")